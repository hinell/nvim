-- @module hinell-bootstrap=
-- System introspection script reporting on missing/installing required modules
local sys = require("hinell.std")
local sys = require("os")
local table = require("table")
local userDataDir = vim.fn.stdpath("cache")

local pathSep = "\\"
if jit.os == "Linux" then pathSep = "/" end

local M = {}

-- Bootstrap class may be used to check whether script was bootstrapped or not.
-- When it"s bootstrapped, then

M.bootstrap = {}
M.bootstrap.path = userDataDir .. pathSep .. ".hinell-bootstrapped"

--- Check whether bootstrap file is written
---@return boolean
M.bootstrap.locked = function()
	local bootStrapFile, err = io.open(M.bootstrap.path, "r")
	if err then
		return false
	else
		return true
	end
end

-- Returns true only when locking file is written
M.bootstrap.lock = function()
	local bootStrapFile, err = io.open(M.bootstrap.path, "r")
	if err then
		-- LuaFormatter off
		bootStrapFileMsg = "This file is automatically generated." ..
			               "Remove if you want to re-run bootstrapping script."
	   -- LuaFormatter on
		bootStrapFile, err = io.open(M.bootstrap.path, "w")
		result = bootStrapFile:write(bootStrapFileMsg)
		bootStrapFile:flush()
		bootStrapFile:close()
		return true
	end
	return false
end

M.fonts = Array:new()
-- Check if NerdFonts are installed
M.fonts.has = function(self, fontName)
	fontName = fontName
	assert(fontName, string.format("[[%s]]: %s ", "[hinell-bootstrap]",
	                               "font name is required"))
	if jit.os == "Linux" then
		if sys.execute(("fc-list -q %s"):format(fontName)) == 0 then
			self:push(fontName)
		end
	end
	if #self == 0 then
		local nfWarning =
			("[hinell-config]: NerdFonts are required for plugins to work properly. Install from %s"):format(
				"https://github.com/ryanoasis/nerd-fonts/")
		vim.notify(nfWarning, vim.log.levels.ERROR)
	end
end

M.lsps = {}
M.lsps.install = function(self)
	if jit.os == "Linux" then
		if sys.execute("which npm") then
			print("npm found. Run the following to install necessary language servers:")
			print(
				"npm i -g vscode-langservers-extracted bash-language-server sql-language-server typescript-language-server vim-language-server yaml-language-server")
		end
	end
end

M.packer = {}
--- @brief [[
--- This automatically installs packer.nvim
--- Source: https://github.com/wbthomason/packer.nvim
--- ]]
M.packer.install = function()
	local fn = vim.fn
	local install_path = fn.stdpath("data")
	.. "/site/pack/packer/start/packer.nvim"
	if fn.empty(fn.glob(install_path)) > 0 then
		fn.system({
			"git", "clone", "--depth", "1", "https://github.com/wbthomason/packer.nvim",
			install_path
		})
		vim.cmd [[packadd packer.nvim]]
		return true
	end
	return false
end

-- lazy.nvim package manager
M.lazy = {}
--- Install lazy.nvim package manager
M.lazy.install = function()
	local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
	if not vim.loop.fs_stat(lazypath) then
	  vim.fn.system({
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/folke/lazy.nvim.git",
		"--branch=stable", -- latest stable release
		lazypath,
	  })
	end
end

return M
